name: NASA Images Pipeline

on:
  push:
    branches:
      - main

jobs:
  load_dates:
    runs-on: ubuntu-latest
    outputs:
      dates: ${{ steps.set_output.outputs.dates }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up jq for JSON parsing
        run: sudo apt-get install jq

      - name: Load Dates from JSON
        id: set_output
        run: |
          # Leer fechas desde data.json y unirlas en un string separado por comas
          DATES=$(jq -r '.dates[]' data.json | paste -sd "," -)
          echo "Fechas: $DATES"
          echo "::set-output name=dates::$DATES"

  download_images:
    needs: load_dates
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up jq for JSON parsing
        run: sudo apt-get install jq

      - name: Load NASA API Key
        id: nasa_api_key
        run: echo "API_KEY=${{ secrets.NASA_API_KEY }}" >> $GITHUB_ENV

      - name: Fetch and Cache Image for Date
        run: |
          CACHE_DIR="cache"
          IMAGE_DIR="images"
          DATE=${{ matrix.date }}

          # Crear directorios si no existen
          mkdir -p $CACHE_DIR
          mkdir -p $IMAGE_DIR

          CACHE_FILE="$CACHE_DIR/$DATE.json"
          IMAGE_FILE="$IMAGE_DIR/img-$DATE.jpg"

          # Revisar si el cache existe, de lo contrario, realizar petici칩n al API
          if [ -f "$CACHE_FILE" ]; then
            echo "Usando cache para la fecha $DATE."
            URL=$(jq -r '.url' "$CACHE_FILE")
          else
            echo "Cache no encontrado, haciendo la petici칩n para la fecha $DATE."
            RESPONSE=$(curl -s "https://api.nasa.gov/planetary/apod?api_key=${{ secrets.NASA_API_KEY }}&date=$DATE")

            # Guardar la respuesta en cache
            echo "$RESPONSE" > "$CACHE_FILE"

            # Obtener la URL de la imagen
            URL=$(echo "$RESPONSE" | jq -r '.url')
          fi

          # Verificar si la URL es v치lida antes de descargar la imagen
          if [[ "$URL" != "null" ]]; then
            echo "Descargando imagen para la fecha $DATE."
            curl -s "$URL" --output "$IMAGE_FILE"
          else
            echo "No se encontr칩 imagen para la fecha $DATE."
          fi

      - name: Upload images as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: "img-${{ matrix.date }}"
          path: images/img-${{ matrix.date }}.jpg
          retention-days: 1
