name: NASA Images Pipeline

on:
  push:
    branches:
      - main

jobs:
  download_images:
    runs-on: ubuntu-latest
    continue-on-error: true

    env:
      API_KEY: ${{ secrets.NASA_API_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up jq for JSON parsing
        run: sudo apt-get install -y jq

      - name: Load dates from data.json
        id: load_dates
        run: |
          DATES=$(jq -r '.dates[]' data.json)
          echo "$DATES" | awk '{print "{\"date\": \"" $1 "\"}"}' | jq -s '.' > dates-matrix.json

      - name: Set dates as output
        id: matrix_setup
        run: echo "::set-output name=matrix::{ \"include\": $(cat dates-matrix.json) }"

    strategy:
      matrix: ${{ fromJson(steps.matrix_setup.outputs.matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up jq for JSON parsing
        run: sudo apt-get install -y jq

      - name: Fetch and Cache Images from NASA API
        run: |
          DATE="${{ matrix.date }}"
          CACHE_DIR="cache"
          IMAGE_DIR="images"
          CACHE_FILE="$CACHE_DIR/$DATE.json"
          IMAGE_FILE="$IMAGE_DIR/img-$DATE.jpg"
          
          # Crear directorios si no existen
          mkdir -p $CACHE_DIR
          mkdir -p $IMAGE_DIR
          
          # Revisar si el cache existe
          if [ -f "$CACHE_FILE" ]; then
            echo "Cache encontrado para la fecha $DATE."
            URL=$(jq -r '.url' "$CACHE_FILE")
          else
            # Hacer la petición al API
            RESPONSE=$(curl -s "https://api.nasa.gov/planetary/apod?api_key=$API_KEY&date=$DATE")
            
            # Guardar la respuesta en cache
            echo "$RESPONSE" > "$CACHE_FILE"
            # Obtener la URL de la imagen
            URL=$(echo "$RESPONSE" | jq -r '.url') 
          fi

          # Verificar si la URL es válida
          if [[ "$URL" != "null" ]]; then
            echo "Descargando imagen para la fecha $DATE."
            curl -s "$URL" --output "$IMAGE_FILE"
          else
            echo "No se encontró imagen para la fecha $DATE."
          fi

      - name: Upload image as artifact
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: "NASA Image ${{ matrix.date }}"
          path: images/img-${{ matrix.date }}.jpg
          retention-days: 1
